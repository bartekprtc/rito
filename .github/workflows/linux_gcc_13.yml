name: Linux (ubuntu-latest) - gcc-13 - build (debug, release), tests, coverage, install

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false

    - name: Install GCC 13, ninja, lcov, dependencies (Poco + GTest)
      shell: bash
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt install gcc-13 g++-13 ninja-build lcov libpoco-dev libgtest-dev
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100 --slave /usr/bin/g++ g++ /usr/bin/g++-13 --slave /usr/bin/gcov gcov /usr/bin/gcov-13
        sudo update-alternatives --set gcc /usr/bin/gcc-13

    - name: Configure CMake for Debug build
      shell: cmake -P {0}
      run: |
        execute_process(
          COMMAND cmake
            -S ${{ github.workspace }}
            -B build
            -D CMAKE_BUILD_TYPE=Debug
            -D CMAKE_CXX_COMPILER=g++
            -G Ninja
            -D BUILD_TESTING=ON
            -D CMAKE_INSTALL_PREFIX=build/install
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Failed to build project")
        endif()

    - name: Build Debug
      shell: bash
      run: cmake --build build

    - name: Run tests
      shell: bash
      run: ctest -VV --test-dir build

    - name: Build coverage
      shell: bash
      run: cmake --build build -t Rito-coverage

    - name: Check coverage and generate coverage report
      uses: zgosalvez/github-actions-report-lcov@v3
      with:
        coverage-files: build/*.info
        minimum-coverage: 10
        artifact-name: rito-gcc-coverage-report
        github-token: ${{ secrets.GITHUB_TOKEN }}
        update-comment: true

    - name: Install
      shell: bash
      run: cmake --build build -t install

    - name: Remove build folder before Release build
      shell: bash
      run: rm -rf build

    - name: Configure CMake for Release build
      shell: cmake -P {0}
      run: |
        execute_process(
          COMMAND cmake
            -S ${{ github.workspace }}
            -B build
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_CXX_COMPILER=g++
            -G Ninja
            -D BUILD_TESTING=ON
            -D CMAKE_INSTALL_PREFIX=build/install
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Failed to build project")
        endif()

    - name: Build Release
      shell: bash
      run: cmake --build build

    - name: Run tests
      shell: bash
      run: ctest -VV --test-dir build

    - name: Install
      shell: bash
      run: cmake --build build -t install
